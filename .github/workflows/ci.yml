name: NLC Monitoring Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  ELECTRON_CACHE: '~/.cache/electron'
  ELECTRON_BUILDER_CACHE: '~/.cache/electron-builder'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          packages/backend/requirements.txt
          packages/backend/pyproject.toml

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsqlcipher-dev \
          pkg-config \
          python3-dev \
          tesseract-ocr \
          libtesseract-dev

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npm run type-check

    - name: Run ESLint
      run: npm run lint

    - name: Run frontend unit tests
      run: npm test -- --passWithNoTests --watchAll=false

    - name: Run backend tests
      run: |
        cd packages/backend
        python -m pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: packages/backend/coverage.xml
        flags: backend
        name: backend-coverage

  build-and-package:
    runs-on: ${{ matrix.os }}
    needs: lint-and-test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsqlcipher-dev \
          pkg-config \
          python3-dev \
          tesseract-ocr \
          libtesseract-dev

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        choco install python --version=3.11.0
        choco install vcredist2015

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build:frontend

    - name: Package Electron app
      run: npm run package
      env:
        CI: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nlc-monitoring-${{ matrix.os }}
        path: |
          dist/
          packages/backend/dist/

  release:
    runs-on: ubuntu-latest
    needs: build-and-package
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset - Linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/nlc-monitoring-ubuntu-latest/dist/*.deb
        asset_name: nlc-monitoring-linux.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload Release Asset - Windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/nlc-monitoring-windows-latest/dist/*.exe
        asset_name: nlc-monitoring-windows.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    - name: Upload Release Asset - macOS
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/nlc-monitoring-macos-latest/dist/*.dmg
        asset_name: nlc-monitoring-macos.dmg
        asset_content_type: application/x-apple-diskimage

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # üîπ Step 0: Ensure package-lock.json exists
  generate-lockfile:
    name: Ensure package-lock.json
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        # ‚ö†Ô∏è no cache here, lockfile doesn‚Äôt exist yet

    - name: Clean old lockfile
      run: rm -f package-lock.json

    - name: Install dependencies (generate lockfile)
      run: npm install --workspaces

    - name: Verify lockfile created
      run: ls -l package-lock.json

    - name: Commit package-lock.json
      run: |
        if [ -f "package-lock.json" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package-lock.json
          git commit -m "chore: auto-generate package-lock.json [skip ci]" || echo "No changes to commit"
          git push
        fi

  # üîπ Job 1: Code Quality & Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: generate-lockfile
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint JavaScript/TypeScript
      run: npm run lint

    - name: Check Prettier formatting
      run: npm run format:check

    - name: TypeScript type checking
      run: npm run type-check || true

  # üîπ Job 2: Test Suite
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install Node dependencies (monorepo)
      run: npm install --workspaces
      
    - name: Install Python dependencies
      run: |
        cd packages/backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run JavaScript/TypeScript tests
      run: npm run test
      
    - name: Run Python tests
      run: |
        cd packages/backend
        python -m pytest tests/ -v --cov=src --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/backend/coverage.xml
        flags: backend
        name: backend-coverage

  # üîπ Job 3: Build All Packages
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies (monorepo)
      run: npm install --workspaces
      
    - name: Build shared package
      run: npm run build --workspace=@engineering-app/shared
      
    - name: Build frontend
      run: npm run build --workspace=@engineering-app/frontend
      
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: packages/frontend/dist/
        retention-days: 7

  # üîπ Job 4: Build Desktop Apps (Multiple OS)
  build-desktop:
    name: Build Desktop App
    needs: build
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies (monorepo)
      run: npm install --workspaces
      
    - name: Build shared package
      run: npm run build --workspace=@engineering-app/shared
      
    - name: Build desktop app
      run: npm run build --workspace=@engineering-app/desktop
      
    - name: Build distributables (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run dist:win --workspace=@engineering-app/desktop
      
    - name: Build distributables (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run dist:mac --workspace=@engineering-app/desktop
      
    - name: Build distributables (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: npm run dist:linux --workspace=@engineering-app/desktop
      
    - name: Upload desktop artifacts
      uses: actions/upload-artifact@v3
      with:
        name: desktop-${{ matrix.os }}
        path: packages/desktop/release/
        retention-days: 30
